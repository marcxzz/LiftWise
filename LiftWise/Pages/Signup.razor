@page "/signup"
@using LiftWise.Data
@inject IUserHandler userHandler
@inject NavigationManager navigationManager

<div class="d-flex justify-content-center align-items-center w-100 vh-100">
	<form class="row g-3 needs-validation w-25" @onsubmit="RegisterUser_Click" id="signupForm" novalidate>
		<h1 class="text-center fw-xbold text-primary">LiftWise</h1>
		<h3 class="text-center">Sign up</h3>
		@if (error != "")
		{
			<div class="alert alert-danger" role="alert">
				@error
			</div>
		}
		<div class="col-12">
			<label for="firstNameInput" class="form-label">First name</label>
			<input type="text" class="form-control" id="firstNameInput" @bind="firstname" required minlength="2" maxlength="30">
			<div class="invalid-feedback">
				Please type your first name.
			</div>
		</div>
		<div class="col-12">
			<label for="lastNameInput" class="form-label">Last name</label>
			<input type="text" class="form-control" id="lastNameInput" @bind="lastname" required minlength="2" maxlength="30">
			<div class="invalid-feedback">
				Please type your last name.
			</div>
		</div>
		<div class="col-12">
			<label for="taxCodeInput" class="form-label">Tax code</label>
			<input type="text" class="form-control" id="taxCodeInput" @bind="taxcode" required minlength="16" maxlength="16">
			<div class="invalid-feedback">
				Please type your tax code.
			</div>
		</div>
		<div class="col-12">
			<label for="emailInput" class="form-label">Email</label>
			<input type="email" class="form-control" id="emailInput" @bind="email" required maxlength="320">
			<div class="invalid-feedback">
				Please type an email.
			</div>
		</div>
		<div class="col-12">
			<label for="passwordInput" class="form-label">Password</label>
			<input type="password" class="form-control" id="passwordInput" @bind="password" required minlength="8" maxlength="32">
			<div class="invalid-feedback">
				Please type a password.
			</div>
		</div>
		<div class="col-12">
			<div class="form-check">
				<input class="form-check-input" type="checkbox" value="" id="consentCheckbox" @bind="termsAccepted" required>
				<label class="form-check-label" for="consentCheckbox">
					Agree to terms and conditions.
				</label>
				<div class="invalid-feedback">
					You must agree before submitting.
				</div>
			</div>
		</div>
		<div class="col-12 d-flex justify-content-center">
			<button class="btn btn-primary" type="submit">SIGN UP</button>
		</div>
		<p class="text-center mt-5">Already have an account? <a href="/login">Log in</a></p>
	</form>
</div>

<script> @* bootstrap form validation *@
	// Example starter JavaScript for disabling form submissions if there are invalid fields
	(function () {
		'use strict'

		// Fetch all the forms we want to apply custom Bootstrap validation styles to
		var forms = document.querySelectorAll('.needs-validation')

		// Loop over them and prevent submission
		Array.prototype.slice.call(forms)
		.forEach(function (form) {
			form.addEventListener('submit', function (event) {
				if (!form.checkValidity()) {
					event.preventDefault()
					event.stopPropagation()
				}

				form.classList.add('was-validated')
			}, false)
		})
	})()
</script>


@code {
	string firstname, lastname, taxcode, email, password, error = "";
	bool termsAccepted = false;

	private void RegisterUser_Click()
	{
		if (!string.IsNullOrEmpty(firstname) &&
			!string.IsNullOrEmpty(lastname) &&
			!string.IsNullOrEmpty(taxcode) &&
			!string.IsNullOrEmpty(email) &&
			!string.IsNullOrEmpty(password) &&
			termsAccepted)
		{
			switch (userHandler.Register(firstname, lastname, taxcode, email, password))
			{
				case 1:
					Console.WriteLine($"User {firstname} {lastname} registered successfully");
					error = "";
					navigationManager.NavigateTo("/login");
					break;
				case 0:
					Console.WriteLine($"A user with email \"{email}\" is already registered");
					error = $"A user with email \"{email}\" is already registered.";
					break;
				case -1:
					Console.WriteLine("An error has occured during user creation");
					error = "An error has occured during user creation.";
					break;
				default:
					break;
			}
		}
		else
		{
			error = "Cannot register user: there are empty fields.";
			Console.WriteLine("Cannot register user: there are empty fields");
		}
	}
}